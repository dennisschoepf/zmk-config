#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define SYS     3
#define LOCK    4

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

/ {
    macros {
        tmux: tmux {
            label = "tmux prefix";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp B>
                , <&macro_release &kp LCTRL>
                ;
        };

        arrow_fun: arrow_fun {
            label = "arrow fun";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp EQUAL>
                , <&macro_tap &kp GT>
                , <&macro_tap &kp SPACE>
                , <&macro_tap &kp LBRC>
                ;
        };

        tag_close: tag_close {
            label = "tag close";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp FSLH>
                , <&macro_tap &kp GT>
                ;
        };

    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_lock {
            timeout-ms = <50>;
            key-positions = <1 10>;
            bindings = <&tog LOCK>;
        };
        combo_unlock {
            timeout-ms = <50>;
            key-positions = <1 2 9 10>;
            layers = <LOCK>;
            bindings = <&tog DEFAULT>;
        };

    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <SYS>;
        };
    };
}; 

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P         &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &mt LALT SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH      &tmux
         &sk LSHIFT &mo LOWER &mt LGUI RET   &mt CTRL SPACE &mo RAISE &kp BSPC
                        >;
                };

                lower_layer {
                        bindings = <
   &trans &kp HASH  &kp DOLLAR &kp LBKT &kp RBKT &kp AMPS     &kp GRAVE &kp PLUS  &kp UNDER &tag_close     &trans    &trans
   &trans &kp EXCL  &kp AT     &kp LPAR &kp RPAR &arrow_fun   &kp TILDE &kp EQUAL &kp MINUS &kp STAR       &kp COLON &kp DQT
   &trans &kp PRCNT &kp CARET  &kp LBRC &kp RBRC &kp BSLH     &kp PIPE2 &kp LT    &kp GT    &kp QMARK      &trans    &trans
                               &trans   &trans   &trans       &trans    &trans    &trans
                        >;
                };

                raise_layer {
                        bindings = <
   &trans &trans &kp N7 &kp N8 &kp N9 &trans   &trans   &trans   &trans &trans    &trans &trans
   &trans &kp N0 &kp N4 &kp N5 &kp N6 &trans   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &trans &trans &kp N1 &kp N2 &kp N3 &trans   &trans   &trans   &trans &trans    &trans &trans
                        &trans &trans &trans   &trans   &trans   &trans
                        >;
                };

                sys_layer {
                        bindings = <
   &trans     &kp H        &trans       &trans       &trans       &trans         &trans &trans &trans &trans &trans &ext_power EP_OFF
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans &trans &trans &trans &trans &bl BL_OFF
   &trans     &trans       &trans       &trans       &trans       &trans         &trans &trans &trans &trans &trans &rgb_ug RGB_OFF
                                        &trans       &trans       &trans         &trans &trans &trans
                        >;
                };

                lock_layer {
                        bindings = <
   &none &none &none &none &none &none   &none &none &none &none &none &none
   &none &none &none &none &none &none   &none &none &none &none &none &none
   &none &none &none &none &none &none   &none &none &none &none &none &none
                     &none &none &none   &none &none &tog DEFAULT
                        >;
                };
        };
};
